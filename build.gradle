plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.97'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url 'https://maven.terraformersmc.com/releases/'
        content {
            includeGroup 'dev.emi'
            includeGroup 'com.terraformersmc'
        }
    }
    maven {
        url "https://maven.shedaniel.me/"
        content {
            includeGroup 'me.shedaniel'
            includeGroup 'me.shedaniel.cloth'
            includeGroup 'me.shedaniel.cloth.api'
            includeGroup 'dev.architectury'
        }
    }
    maven {
        url "https://maven.blamejared.com/"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    // Recipe viewers
//    compileOnly "dev.emi:emi-neo:1.0.11+1.20.1"
    compileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${project.rei_version}"
    compileOnly "dev.architectury:architectury-neoforge:${project.architectury_version}"

    // https://github.com/emilyploszaj/emi
    compileOnly "dev.emi:emi-neoforge:${emi_version}"

    compileOnly("mezz.jei:jei-1.20.4-common-api:${jei_version}")
    compileOnly "mezz.jei:jei-1.20.4-neoforge-api:${jei_version}"

    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "rei": runtimeOnly("me.shedaniel:RoughlyEnoughItems-neoforge:$rei_version"); break
        case "emi": runtimeOnly("dev.emi:emi-neoforge:${emi_version}"); break
        case "jei": runtimeOnly("mezz.jei:jei-1.20.4-neoforge:${jei_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be EMI, REI, JEI or disabled.")
    }
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

//processResources {
//    inputs.property "version", project.version
//    inputs.property "minecraft_version", project.minecraft_version
//    inputs.property "loader_version", project.loader_version
//    filteringCharset "UTF-8"
//
//    filesMatching("fabric.mod.json") {
//        expand "version": project.version,
//                "minecraft_version": project.minecraft_version,
//                "loader_version": project.loader_version
//    }
//}

//def targetJavaVersion = 17
//tasks.withType(JavaCompile).configureEach {
//    // ensure that the encoding is set to UTF-8, no matter what the system default is
//    // this fixes some edge cases with special characters not displaying correctly
//    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
//    // If Javadoc is generated, this must be specified in that task too.
//    it.options.encoding = "UTF-8"
//    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
//        it.options.release = targetJavaVersion
//    }
//}
//
//java {
//    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
//    if (JavaVersion.current() < javaVersion) {
//        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
//    }
//    archivesBaseName = project.mod_id
//    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
//    // if it is present.
//    // If you remove this line, sources will not be generated.
//    withSourcesJar()
//}

runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
